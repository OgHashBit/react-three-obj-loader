{"version":3,"sources":["index.js"],"names":["style","height","App","sceneSetup","width","_this","mount","clientWidth","clientHeight","scene","THREE","camera","position","z","controls","OrbitControls","renderer","setSize","appendChild","domElement","loadTheModel","OBJLoader","load","object","add","el","getObjectByName","set","material","color","rotation","x","model","xhr","console","log","loaded","total","error","addLights","lights","startAnimationLoop","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","this","addEventListener","removeEventListener","cancelAnimationFrame","dispose","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","ref","Component","Container","state","isMounted","_this4","_this$state$isMounted","Fragment","onClick","setState","React","rootElement","document","getElementById","ReactDOM"],"mappings":"iOAMMA,EAAQ,CACVC,OAAQ,KAGNC,6MAiBFC,WAAa,WAET,IAAMC,EAAQC,EAAKC,MAAMC,YACnBN,EAASI,EAAKC,MAAME,aAE1BH,EAAKI,MAAQ,IAAIC,IACjBL,EAAKM,OAAS,IAAID,IACd,GACAN,EAAQH,EACR,GACA,KAEJI,EAAKM,OAAOC,SAASC,EAAI,IAGzBR,EAAKS,SAAW,IAAIC,IAAeV,EAAKM,OAAQN,EAAKC,OACrDD,EAAKW,SAAW,IAAIN,IACpBL,EAAKW,SAASC,QAASb,EAAOH,GAC9BI,EAAKC,MAAMY,YAAab,EAAKW,SAASG,eAK1CC,aAAe,YAEI,IAAIC,KAGZC,KAEH,YAEA,SAAEC,GACElB,EAAKI,MAAMe,IAAKD,GAIhB,IAAME,EAAKpB,EAAKI,MAAMiB,gBAAgB,cAItCD,EAAGb,SAASe,IAAI,GAAI,IAAI,GACxBF,EAAGG,SAASC,MAAMF,IAAI,SACtBF,EAAGK,SAASC,EAAI,KAGhB1B,EAAK2B,MAAQP,GAGhB,SAAEQ,GAECC,QAAQC,IAAOF,EAAIG,OAASH,EAAII,MAAQ,IAAQ,aAInD,SAAEC,GAECJ,QAAQC,IAAK,qBAAuBG,QAOhDC,UAAY,WACR,IAAMC,EAAS,GAGfA,EAAQ,GAAM,IAAI9B,IAAkB,SAAU,EAAG,GACjD8B,EAAQ,GAAM,IAAI9B,IAAkB,SAAU,EAAG,GACjD8B,EAAQ,GAAM,IAAI9B,IAAkB,SAAU,EAAG,GAGjD8B,EAAQ,GAAI5B,SAASe,IAAK,EAAG,IAAM,GACnCa,EAAQ,GAAI5B,SAASe,IAAK,IAAM,IAAM,KACtCa,EAAQ,GAAI5B,SAASe,KAAO,KAAQ,KAAQ,KAE5CtB,EAAKI,MAAMe,IAAKgB,EAAQ,IACxBnC,EAAKI,MAAMe,IAAKgB,EAAQ,IACxBnC,EAAKI,MAAMe,IAAKgB,EAAQ,OAG5BC,mBAAqB,WAEbpC,EAAK2B,QAAO3B,EAAK2B,MAAMF,SAASjB,GAAK,MAEzCR,EAAKW,SAAS0B,OAAQrC,EAAKI,MAAOJ,EAAKM,QAKvCN,EAAKsC,UAAYC,OAAOC,sBAAsBxC,EAAKoC,uBAGvDK,mBAAqB,WACjB,IAAM1C,EAAQC,EAAKC,MAAMC,YACnBN,EAASI,EAAKC,MAAME,aAE1BH,EAAKW,SAASC,QAASb,EAAOH,GAC9BI,EAAKM,OAAOoC,OAAS3C,EAAQH,EAI7BI,EAAKM,OAAOqC,6GAtHZC,KAAK9C,aACL8C,KAAKV,YACLU,KAAK7B,eACL6B,KAAKR,qBACLG,OAAOM,iBAAiB,SAAUD,KAAKH,mEAIvCF,OAAOO,oBAAoB,SAAUF,KAAKH,oBAC1CF,OAAOQ,qBAAqBH,KAAKN,WACjCM,KAAKnC,SAASuC,2CA+GT,IAAAC,EAAAL,KACL,OAAOM,EAAAC,EAAAC,cAAA,OAAKzD,MAAOA,EAAO0D,IAAK,SAAAA,GAAG,OAAKJ,EAAKhD,MAAQoD,YA5H1CC,aAgIZC,6MACFC,MAAQ,CAACC,WAAW,2EAEX,IAAAC,EAAAd,KAAAe,EACsBf,KAAKY,MAAzBC,iBADF,IAAAE,KAEL,OACIT,EAAAC,EAAAC,cAAAF,EAAAC,EAAAS,SAAA,KACIV,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMH,EAAKI,SAAS,SAAAN,GAAK,MAAK,CAACC,WAAYD,EAAMC,eAC7DA,EAAY,UAAY,SAE5BA,GAAaP,EAAAC,EAAAC,cAACvD,EAAD,MACb4D,GAAaP,EAAAC,EAAAC,cAAA,qDAXNW,IAAMT,WAiBxBU,EAAcC,SAASC,eAAe,QAC5CC,IAAS9B,OAAOa,EAAAC,EAAAC,cAACG,EAAD,MAAeS","file":"static/js/main.d147b352.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from 'three';\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport {OBJLoader} from \"three/examples/jsm/loaders/OBJLoader\";\n\nconst style = {\n    height: 500 // we can control scene size by setting container dimensions\n};\n\nclass App extends Component {\n    componentDidMount() {\n        this.sceneSetup();\n        this.addLights();\n        this.loadTheModel();\n        this.startAnimationLoop();\n        window.addEventListener('resize', this.handleWindowResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleWindowResize);\n        window.cancelAnimationFrame(this.requestID);\n        this.controls.dispose();\n    }\n\n    // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n    // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n    sceneSetup = () => {\n        // get container dimensions and use them for scene sizing\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(\n            75, // fov = field of view\n            width / height, // aspect ratio\n            0.1, // near plane\n            1000 // far plane\n        );\n        this.camera.position.z = 500; // is used here to set some distance from a cube that is located at z = 0\n        // OrbitControls allow a camera to orbit around the object\n        // https://threejs.org/docs/#examples/controls/OrbitControls\n        this.controls = new OrbitControls( this.camera, this.mount );\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize( width, height );\n        this.mount.appendChild( this.renderer.domElement ); // mount using React ref\n    };\n\n    // Code below is taken from Three.js OBJ Loader example\n    // https://threejs.org/docs/#examples/en/loaders/OBJLoader\n    loadTheModel = () => {\n        // instantiate a loader\n        const loader = new OBJLoader();\n\n        // load a resource\n        loader.load(\n            // resource URL relative to the /public/index.html of the app\n            'eleph.obj',\n            // called when resource is loaded\n            ( object ) => {\n                this.scene.add( object );\n\n                // get the newly added object by name specified in the OBJ model (that is Elephant_4 in my case)\n                // you can always set console.log(this.scene) and check its children to know the name of a model\n                const el = this.scene.getObjectByName(\"Elephant_4\");\n\n                // change some custom props of the element: placement, color, rotation, anything that should be\n                // done once the model was loaded and ready for display\n                el.position.set(0, -150,0 );\n                el.material.color.set(0x50C878);\n                el.rotation.x = 23.5;\n\n                // make this element available inside of the whole component to do any animation later\n                this.model = el;\n            },\n            // called when loading is in progresses\n             ( xhr ) => {\n\n                console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\n\n            },\n            // called when loading has errors\n             ( error ) => {\n\n                console.log( 'An error happened:' + error );\n\n            }\n        );\n    };\n\n    // adding some lights to the scene\n    addLights = () => {\n        const lights = [];\n\n        // set color and intensity of lights\n        lights[ 0 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n        lights[ 1 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n        lights[ 2 ] = new THREE.PointLight( 0xffffff, 1, 0 );\n\n        // place some lights around the scene for best looks and feel\n        lights[ 0 ].position.set( 0, 2000, 0 );\n        lights[ 1 ].position.set( 1000, 2000, 1000 );\n        lights[ 2 ].position.set( - 1000, - 2000, - 1000 );\n\n        this.scene.add( lights[ 0 ] );\n        this.scene.add( lights[ 1 ] );\n        this.scene.add( lights[ 2 ] );\n    };\n\n    startAnimationLoop = () => {\n        // slowly rotate an object\n        if (this.model) this.model.rotation.z += 0.005;\n\n        this.renderer.render( this.scene, this.camera );\n\n        // The window.requestAnimationFrame() method tells the browser that you wish to perform\n        // an animation and requests that the browser call a specified function\n        // to update an animation before the next repaint\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n    };\n\n    handleWindowResize = () => {\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        this.renderer.setSize( width, height );\n        this.camera.aspect = width / height;\n\n        // Note that after making changes to most of camera properties you have to call\n        // .updateProjectionMatrix for the changes to take effect.\n        this.camera.updateProjectionMatrix();\n    };\n\n    render() {\n        return <div style={style} ref={ref => (this.mount = ref)} />;\n    }\n}\n\nclass Container extends React.Component {\n    state = {isMounted: true};\n\n    render() {\n        const {isMounted = true} = this.state;\n        return (\n            <>\n                <button onClick={() => this.setState(state => ({isMounted: !state.isMounted}))}>\n                    {isMounted ? \"Unmount\" : \"Mount\"}\n                </button>\n                {isMounted && <App />}\n                {isMounted && <div>Scroll to zoom, drag to rotate</div>}\n            </>\n        )\n    }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Container />, rootElement);"],"sourceRoot":""}